1/0.3272727
?acast
library(reshape2)
?acast
?rep
?apply
?sapply
sqrt(29.34)
72-67.2
4.8/5.416641
?pow
?exp
exp(2)
source('~/Documents/INSOFE/R Code/table1.R')
?pnorm
pnrom(110,90,15) - pnorm(80,90,15)
pnorm(110,90,15) - pnorm(80,90,15)
rand_1000<-pnorm(1000,90,15)
rand_1000
pnorm(110,90,15) - pnorm(80,90,15)
pnorm(1000,90,15)
?dnorm
dnorm(pnorm(1000,90,15),90,15)
dnorm(50,90,15)
?qnorm
qnorm(0.5,mean=90,sd=15)
mean=90; sd=15
dnorm(50,90,15)
x <- round(sort(rnorm(1000,mean,sd)),2)
lb=min(x); ub=60
y <- dnorm(sort(x),mean,sd)
plot(x, y, type="l", xlab="Work Hours", ylab="",main="Normal Distribution", axes=FALSE)
i <- x >= lb & x <= ub
lines(x, y)
?lines
polygon(c(lb,x[i],ub), c(0,y[i],0), col="red")
area <- pnorm(ub, mean, sd) - pnorm(lb, mean, sd)
mtext(paste("P(",lb,"< Work Hours <",ub,") =", signif(area, digits=3)),3)
axis(1, at=seq(min(x), max(x), sd), pos=0)
?pnorm
pnorm(60,mean=30,sd=20)
1 - pnorm(59.5,mean=30,sd=20)
?ppois
ppois(4,3)
1-ppois(3,3)
dpois(4,3)
?pbinom
pbinom(10,15,0.25)
dpois(4,3)
ppois(4,3)
rnorm(0:10,mean=5,sd=1)
round(rnorm(0:10,mean=5,sd=1),2)
sort(round(rnorm(0:10,mean=5,sd=1),2))
x<-sort(round(rnorm(0:10,mean=5,sd=1),2))
plot(x)
y<-dnorm(x,mean=5,sd=1)
plot(x,y)
plot(x,y,type="l")
x<-sort(round(rnorm(0:100,mean=50,sd=1),2))
y<-dnorm(x,mean=50,sd=1)
plot(x,y,type="l")
x<-sort(round(rnorm(0:500,mean=250,sd=1),2))
y<-dnorm(x,mean=250,sd=1)
plot(x,y,type="l")
plot(x,y,type="h")
plot(x,y,type="h",col="green")
plot(x,y,type="h")
1 - pnorm(60,mean=30,sd=20)
pnorm(40,mean=30,sd=20)
pbinom(15,size=n,prob=p)-pbinom(10,size=n,prob=p)
p=0.25
n=15
pbinom(15,size=n,prob=p)-pbinom(10,size=n,prob=p)
qnorm()
?qnorm
qnorm(69,mean=71,sd=4.5)
qnorm(0.8,mean=71,sd=4.5)
qnorm(0.2,mean=71,sd=4.5)
pnorm(100,mean=112,sd=6.67)
qnorm(100,mean=112,sd=6.67)
pnorm(124,mean=112,sd=6.67)
pnorm(124,mean=112,sd=6.67) - pnorm(100,mean=112,sd=6.67)
pnorm(125,mean=120,sd=14)
pnorm(125.5,mean=120,sd=14)
1 - pnorm(125.5,mean=120,sd=14)
25/14
1-pnorm(125.5,120,14/5)
qnorm(0.95)
qnorm(0.95) * 0.449
pnorm(0.95) - pnorm(0.05)
qnorm(0.95) - qnorm(0.05)
qnorm(0.95) - qnorm(0.05) / 2
(qnorm(0.95) - qnorm(0.05) )/ 2
175/1200
1-0.1458333
sqrt((175/1200)*(1-(175/1200)))/1200)
sqrt(((175/1200)*(1-(175/1200)))/1200)
sqrt(15*0.81)
15*0.81
73*0.27
pnorm(80,mean=73,sd=19.71)
pnorm(80.5,mean=73,sd=19.71)
qnorm(0.975)
qnorm(0.025)
qnorm(0.975) - qnorm(0.025)
qnorm(0.975) - qnorm(0.025) / 2
(qnorm(0.975) - qnorm(0.025) )/ 2
pnorm(9900,mean=10000,sd=(120/sqrt(30)))
7.7/sqrt(44)
sqrt(44)
?t.test
150*0.75
sqrt(150*0.75*0.25)
pnorm(105,mean=112.5,sd=5.303301)
1-pnorm(105,mean=112.5,sd=5.303301)
pnorm(104.5,mean=112.5,sd=5.303301)
pnorm(109.5,mean=112.5,sd=5.303301) - pnorm(120.5,mean=112.5,sd=5.303301)
1-pnorm(94.5,mean=112.5,sd=5.303301)
qnorm(97.5,mean=0,sd=1)
qnorm(.975,mean=0,sd=1)
qnorm(.975,mean=0,sd=1)-qnorm(0.025,0,1)
compoff <- c(6, 21, 17, 20, 7, 0, 8, 16, 29, 3, 8, 12, 11, 9, 21, 25, 15, 16)
compoff
t.test(compoff, conf.level = 0.90)
ttest <- t.test(compoff)
ttest$statistic
sd(compoff)
ttest$parameter
data<-c(12,24,35,16,18,19,20,27,9)
t.test(data,0.05)
?t.test
t.test(data,conf.level=0.90)
?qt
summary(data)
qt(data,df=8)
qt(9,df=8)
qt(0.10,df=8)
?anova
data<-as.matrix(c(200,250),c(150,300),c(50,50))
data
data<-as.dataframe(c(200,250),c(150,300),c(50,50))
data<-as.data.frame(c(200,250),c(150,300),c(50,50))
data<-cbind(c(200,250),c(150,300),c(50,50))
data
anova(data)
?lm
lm(data)
?anova
21/207
109/207
62/207
15/207
attach(faithful)
str(faithful)
plot(faithful$eruptions,faithful$waiting)
cov(faithful$eruptions,faithful$waiting)
cor(faithful$eruptions,faithful$waiting)
pnorm(64,mean=71,sd=4.5)
qnorm(0.05990691,mean=71,sd=4.5)
dnorm(64,mean=71,sd=4.5)
?dnorm
pnorm(64,mean=71,sd=4.5,lower.tail=F)
dnorm(c(64,65,66,67,68,69,70,71),mean=71,sd=4.5)
plot(x=seq(1:100),y=dnorm(seq(1:100),mean=50,sd=10))
6.82/1.414
pnorm(60,56.8,1.72)
1-pnorm(60,56.8,1.72)
pnorm(60,56.8,1.72,lower.tail=F)
mean=90; sd=15
dnorm(50,90,15)
x <- round(sort(rnorm(1000,mean,sd)),2)
mean=90; sd=15
dnorm(50,90,15)
x <- round(sort(rnorm(1000,mean,sd)),2)
lb=min(x); ub=60
y <- dnorm(sort(x),mean,sd)
plot(x, y, type="l", xlab="Work Hours", ylab="",main="Normal Distribution", axes=FALSE)
plot(x, y, type="l", xlab="Work Hours", ylab="",main="Normal Distribution", axes=T)
i <- x >= lb & x <= ub
lines(x, y)
lines(x, y,col="red")
polygon(c(lb,x[i],ub), c(0,y[i],0), col="green")
area <- pnorm(ub, mean, sd) - pnorm(lb, mean, sd) #pnorm gives the cumulative probability upto x mtext(paste("P(",lb,"< Work Hours <",ub,") =", signif(area, digits=3)),3)
axis(1, at=seq(min(x), max(x), sd), pos=0)
plot(x, y, type="l", xlab="Work Hours", ylab="",main="Normal Distribution", axes=F)
lines(x, y,col="red")
polygon(c(lb,x[i],ub), c(0,y[i],0), col="green")
area <- pnorm(ub, mean, sd) - pnorm(lb, mean, sd) #pnorm gives the cumulative probability upto x mtext(paste("P(",lb,"< Work Hours <",ub,") =", signif(area, digits=3)),3)
axis(1, at=seq(min(x), max(x), sd), pos=0)
qnorm(0.05)
qnorm(0.95)
?ttest
?t.test
t.test(c(5,7,8,10,2,13,14))
pnorm(15,mean=10,sd=2.236,lower.tail=F)
pnorm(14.5,mean=10,sd=2.236,lower.tail=F)
pnorm(0.05,0,1)
qnorm(0.05,0,1)
pbinom(104, 150, 0.75, lower.tail = TRUE, log.p = FALSE)
pnorm(104.5, 150*0.75, sqrt(150*0.75*0.25))
pbinom(120, 150, 0.75, lower.tail = TRUE, log.p = FALSE)-
pbinom(109, 150, 0.75, lower.tail = TRUE, log.p = FALSE)
pnorm(120.5, 150*0.75, sqrt(150*0.75*0.25))-
pnorm(109.5, 150*0.75, sqrt(150*0.75*0.25))
norm.interval = function(data, variance = var(data), conf.level = 0.95)
{
z = qnorm((1 - conf.level)/2, lower.tail = FALSE)
xbar <- mean(data)
sdx <- sqrt(var(data)/length(data))
c(xbar - z * sdx, xbar + z * sdx)
}
norm.interval(pregnancy, 2)
compoff <- c(6, 21, 17, 20, 7, 0, 8, 16, 29, 3, 8, 12, 11, 9, 21, 25, 15, 16)
compoff
t.test(compoff, conf.level = 0.90)
ttest <- t.test(compoff)
ttest$statistic
sd(compoff)
ttest$parameter
?tapply
?lapply
head(baseball)
library(plyr)
attach(baseball)
dim(baseball)
head(baseball)
data1<-subset(baseball,year >= 1871 & year <=1900)
data1[2]
?predict
rm(list=ls())
getwd()
setwd("/Users/Saatwik/Documents/avidya/LoanPred")
train.file.name="train.csv"
train.data<-read.csv(train.file.name,header=T)
dim(train.data)
str(train.data)
summary(train.data)
sum(is.na(train.data))
train.data.nas<-train.data[!complete.cases(train.data),]
View(train.data.nas)
train.data.nas<-train.data[!is.na(train.data),]
train.data.nas<-train.data[is.na(train.data),]
View(train.data.nas)
is.na(train.data)
train.data[606,]
train.data.nas<-train.data[is.na(train.data)]
train.data.nas<-train.data[-(!is.na(train.data)),]
train.data.nas<-train.data[(is.na(train.data)),]
View(train.data.nas)
?complete.cases()
train.data.nas<-train.data[(!complete.cases(train.data)),]
View(train.data.nas)
require(DMwR)
train.data.imp<-knnImputation(train.data,scale=T,k=5)
View(train.data.imp)
train.data.imp<-centralImputation(train.data)
View(train.data.imp)
train.data[24,]
?centralImputation
View(train.data.nas)
View(train.data.imp)
train.data<-train.data[,-train.data$Loan_id]
train.data<-train.data[,-(train.data$Loan_id)]
train.data<-train.data[-(train.data$Loan_id)]
train.data<-train.data[,-Loan_id]
train.data<-train.data[,-Loan_ID]
train.data<-train.data[,-$Loan_ID]
train.data<-train.data[,-1]
train.data[train.data$Gender = " ",]
train.data[train.data$Gender == " ",]
View(train.data)
train.data[train.data$Gender %not in% ("Male","Female"),]
train.data[train.data$Gender %not in% c("Male","Female"),]
train.data[train.data$Gender %in% c("Male","Female"),]
train.data[(!train.data$Gender %in% c("Male","Female")),]
train.data[(!train.data$Gender %in% c("Male","Female")),]$Gender<-NA
View(train.data)
str(train.data)
View(train.data)
train.data[(!train.data$Gender %in% c("Male","Female")),]$Gender<-NA
train.data[(!train.data$Married %in% c("Yes","No")),]$Married<-NA
train.data[(!train.data$Dependents %in% c("0","1","2","3","4","5")),]$Dependents<-NA
train.data[(!train.data$Self_Employed %in% c("Yes","No")),]$Self_Employed<-NA
train.data.imp<-centralImputation(train.data)
sum(complete.cases(train.data))
sum(is.na(train.data))
View(train.data)
train.data.imp<-centralImputation(train.data)
View(train.data.imp)
sum(is.na(train.data.imp))
View(train.data.imp)
?glm
Log_Reg1<-glm(Loan_Status~.,family=binomial,data=train.data.imp)
summary(Log_Reg1)
?stepAIC
library("car", lib.loc="/Library/Frameworks/R.framework/Versions/3.1/Resources/library")
?stepAIC
Log_Reg2<-glm(Loan_Status~Married+Credit_History+Property_Area,family=binomial,
data=train.data.imp)
summary(Log_reg2)
summary(Log_Reg2)
require(ROCR)
p<-predict(Log_Reg2,train.data.imp,type="response")
p
View(train.data.imp)
pr<-prediction(p,train.data.imp$Loan_Status)
pr
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
abline(a=0, b= 1)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
auc  # very low
conf.mat = table(test$Churned,fitted.class)
conf.mat = table(train.data.imp$Loan_Status,pr)
conf.mat = table(train.data.imp$Loan_Status,p)
accuracy = sum(diag(conf.mat))/sum(conf.mat)
precision = conf.mat[2,2]/sum(conf.mat[,2])
recall = conf.mat[2,2]/sum(conf.mat[2,])
conf.mat
p.class<-ifelse(p$Loan_Status > 0.5, "Y","N")
p.class<-ifelse(p.results > 0.5, "Y","N")
p
str(p)
p.class<-ifelse(p > 0.5, "Y","N")
p.class
conf.mat = table(train.data.imp$Loan_Status,p.class)
accuracy = sum(diag(conf.mat))/sum(conf.mat)
precision = conf.mat[2,2]/sum(conf.mat[,2])
recall = conf.mat[2,2]/sum(conf.mat[2,])
test.data.filename<-"test.csv"
test.data<-read.csv(test.data.filename,header=T)
function<-test_model(model,data){
p<-predict(model,data,type="response")
p.class<-ifelse(p > 0.5, "Y","N")
pr<-prediction(p,data$Loan_Status)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
abline(a=0, b= 1)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
conf.mat = table(data$Loan_Status,p.class)
accuracy = sum(diag(conf.mat))/sum(conf.mat)
precision = conf.mat[2,2]/sum(conf.mat[,2])
recall = conf.mat[2,2]/sum(conf.mat[2,])
res<-data.frame(auc,accuracy,precission,recall)
return (res)
}
test_model<-function(model,data){
p<-predict(model,data,type="response")
p.class<-ifelse(p > 0.5, "Y","N")
pr<-prediction(p,data$Loan_Status)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
abline(a=0, b= 1)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
conf.mat = table(data$Loan_Status,p.class)
accuracy = sum(diag(conf.mat))/sum(conf.mat)
precision = conf.mat[2,2]/sum(conf.mat[,2])
recall = conf.mat[2,2]/sum(conf.mat[2,])
res<-data.frame(auc,accuracy,precission,recall)
return (res)
}
train.perf<-test_model(Log_Reg1,train.data.imp)
test_model<-function(model,data){
p<-predict(model,data,type="response")
p.class<-ifelse(p > 0.5, "Y","N")
pr<-prediction(p,data$Loan_Status)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
abline(a=0, b= 1)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
conf.mat = table(data$Loan_Status,p.class)
accuracy = sum(diag(conf.mat))/sum(conf.mat)
precision = conf.mat[2,2]/sum(conf.mat[,2])
recall = conf.mat[2,2]/sum(conf.mat[2,])
res<-data.frame(auc,accuracy,precision,recall)
return (res)
}
train.perf<-test_model(Log_Reg1,train.data.imp)
View(train.perf)
test.data.filename<-"test.csv"
test.data<-read.csv(test.data.filename,header=T)
test.perf<-test_model(Log_Reg1,test.data)
data<-test.data[complete.cases(test.data),]
View(data)
View(test.data)
test.data<-test.data[,-1]
test.perf<-test_model(Log_Reg1,test.data)
str(test.data)
test.data[(!test.data$Gender %in% c("Male","Female")),]$Gender<-NA
test.data[(!test.data$Married %in% c("Yes","No")),]$Married<-NA
test.data[(!test.data$Dependents %in% c("0","1","2","3","4","5")),]$Dependents<-NA
test.data[(!test.data$Self_Employed %in% c("Yes","No")),]$Self_Employed<-NA
#compute the missing values using central statistics
test.data.imp<-centralImputation(train.data)
test.perf<-test_model(Log_Reg1,test.data.imp)
View(test.perf)
p<-predict(Log_Reg1,test.data.imp,type="response")
pr<-prediction(p,data$Loan_Status)
pr<-prediction(p,test.data.imp$Loan_Status)
pr
p.class<-ifelse(p > 0.7, "Y","N")
p.class
resullt<-cbind(train.data[,1],p.class)
View(resullt)
test.data[,-1]
View(test.data)
test.data.filename<-"test.csv"
test.data<-read.csv(test.data.filename,header=T)
test.data.model<-test.data[,-1]
test.data.ret<-test.data
test.data<-test.data[,-1]
test.data[(!test.data$Gender %in% c("Male","Female")),]$Gender<-NA
test.data[(!test.data$Married %in% c("Yes","No")),]$Married<-NA
test.data[(!test.data$Dependents %in% c("0","1","2","3","4","5")),]$Dependents<-NA
test.data.filename<-"test.csv"
test.data<-read.csv(test.data.filename,header=T)
str(test.data)
test.data.ret<-test.data
test.data<-test.data[,-1]
test.data[(!test.data$Gender %in% c("Male","Female")),]$Gender<-NA
test.data[(!test.data$Married %in% c("Yes","No")),]$Married<-NA
View(test.data)
test.data[(!test.data$Dependents %in% c("0","1","2","3","4","5")),]$Dependents<-NA
test.data[(!test.data$Self_Employed %in% c("Yes","No")),]$Self_Employed<-NA
test.data.imp<-centralImputation(train.data)
test.data.imp<-centralImputation(test.data)
test.perf<-test_model(Log_Reg1,test.data.imp)
test.data.imp$Loan_Status<-"Y"
test.perf<-test_model(Log_Reg1,test.data.imp)
View(test.data.imp)
test.data.imp<-centralImputation(test.data)
p<-predict(Log_Reg1,test.data.imp,type="response")
p.class<-ifelse(p > 0.7, "Y","N")
conf.mat = table(test.data.imp$Loan_Status,p.class)
p.class
conf.mat = table(test.data.imp$Loan_Status,p.class)
results<-data.frame(test.data[,1],p.class)
View(resullt)
test.data[,1]
results<-data.frame(test.data.ret[,1],p.class)
View(results)
?write.csv
write.csv(results,"Loan_Pred_result.csv")
names(results)<-c("Loan_ID","Loan_Status")
write.csv(results,"Loan_Pred_result.csv")
p.class<-ifelse(p > 0.6, "Y","N")
results<-data.frame(test.data.ret[,1],p.class)
names(results)<-c("Loan_ID","Loan_Status")
write.csv(results,"Loan_Pred_result1.csv")
p.class<-ifelse(p > 0.5, "Y","N")
results<-data.frame(test.data.ret[,1],p.class)
names(results)<-c("Loan_ID","Loan_Status")
write.csv(results,"Loan_Pred_result2.csv")
View(train.perf)
train.perf<-test_model(Log_Reg2,train.data.imp)
rm(list=ls())
getwd()
setwd("/Users/Saatwik/Documents/avidya/LoanPred")
require(ROCR)
require(DMwR)
train.file.name="train.csv"
train.data<-read.csv(train.file.name,header=T)
dim(train.data)
train.data<-train.data[,-1]
train.data[(!train.data$Gender %in% c("Male","Female")),]$Gender<-NA
train.data[(!train.data$Married %in% c("Yes","No")),]$Married<-NA
train.data[(!train.data$Dependents %in% c("0","1","2","3","4","5")),]$Dependents<-NA
train.data[(!train.data$Self_Employed %in% c("Yes","No")),]$Self_Employed<-NA
train.data.imp<-centralImputation(train.data)
Log_Reg1<-glm(Loan_Status~.,family=binomial,data=train.data.imp)
summary(Log_Reg1)
Log_Reg2<-glm(Loan_Status~Married+Credit_History+Property_Area,family=binomial,
data=train.data.imp)
summary(Log_Reg2)
test_model<-function(model,data){
p<-predict(model,data,type="response")
p.class<-ifelse(p > 0.5, "Y","N")
pr<-prediction(p,data$Loan_Status)
prf <- performance(pr, measure = "tpr", x.measure = "fpr")
plot(prf)
abline(a=0, b= 1)
auc <- performance(pr, measure = "auc")
auc <- auc@y.values[[1]]
conf.mat = table(data$Loan_Status,p.class)
accuracy = sum(diag(conf.mat))/sum(conf.mat)
precision = conf.mat[2,2]/sum(conf.mat[,2])
recall = conf.mat[2,2]/sum(conf.mat[2,])
res<-data.frame(auc,accuracy,precision,recall)
return (res)
}
train.perf<-test_model(Log_Reg2,train.data.imp)
View(train.perf)
test.data.filename<-"test.csv"
test.data<-read.csv(test.data.filename,header=T)
test.data.ret<-test.data
test.data<-test.data[,-1]
test.data[(!test.data$Gender %in% c("Male","Female")),]$Gender<-NA
test.data[(!test.data$Married %in% c("Yes","No")),]$Married<-NA
test.data[(!test.data$Dependents %in% c("0","1","2","3","4","5")),]$Dependents<-NA
test.data[(!test.data$Self_Employed %in% c("Yes","No")),]$Self_Employed<-NA
test.data.imp<-centralImputation(test.data)
p<-predict(Log_Reg2,test.data.imp,type="response")
p.class<-ifelse(p > 0.5, "Y","N")
results<-data.frame(test.data.ret[,1],p.class)
names(results)<-c("Loan_ID","Loan_Status")
write.csv(results,"Loan_Pred_result2.csv")
test.perf<-test_model(Log_Reg2,test.data.imp)
p.class
